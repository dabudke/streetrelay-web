// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  token String @id @default(cuid()) @map("_id")

  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String

  name   String
  device String
  ip     String

  lastSeen DateTime
  expires  DateTime

  @@map("sessions")
}

model Console {
  id            String   @id @default(cuid()) @map("_id")
  deviceName    String?
  user          User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID        String
  tokenIssuedAt DateTime @default(now())

  @@map("consoles")
}

model EmailVerification {
  token   String   @id @map("_id")
  emailID String
  email   String
  expires DateTime
  user    User     @relation(references: [id], fields: [userID], onDelete: Cascade)
  userID  String   @unique

  @@map("emailVerifications")
}

model User {
  id                String             @id @map("_id")
  email             String?
  emailVerification EmailVerification?
  password          String
  sessions          Session[]
  console           Console[]
  emailVerified Boolean   @default(false)

  nickname       String?
  profilePicture String  @default("/img/user.jpg")
  bio            String  @default("")

  starredBy    User[]   @relation("StarredUsers", fields: [starredByIDs], references: [id])
  starredByIDs String[]

  starredUsers   User[]   @relation("StarredUsers", fields: [starredUserIDs], references: [id])
  starredUserIDs String[]

  inboundTags  Tag[] @relation("InboundTag")
  outboundTags Tag[] @relation("OutboundTag")

  games GameData[]

  isModerator Boolean         @default(false)
  reportedBy  ContentReport[] @relation(name: "Reported")
  reporterOf  ContentReport[] @relation(name: "Reporter")

  @@map("users")
}

model Tag {
  id       String   @id @default(cuid()) @map("_id")
  taggedAt DateTime @default(now())

  /// from
  user   User   @relation("OutboundTag", fields: [userID], references: [id], onDelete: Cascade)
  userID String

  /// to
  target   User   @relation("InboundTag", fields: [targetID], references: [id], onDelete: Cascade)
  targetID String

  gameData    GameData[] @relation(fields: [gameDataIDs], references: [id])
  gameDataIDs String[]   @db.ObjectId

  @@map("tags")
}

model GameData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  uploadedAt DateTime @default(now())

  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String

  game   Game   @relation(fields: [gameID], references: [id])
  gameID String

  data Bytes

  tags   Tag[]    @relation(fields: [tagIDs], references: [id])
  tagIDs String[]

  @@map("data")
}

model Game {
  id      String          @id @map("_id")
  title   String?
  icon    String          @default("/img/game.png")
  data    GameData[]
  reports ContentReport[]

  @@map("games")
}

enum ContentReportType {
  USER
  GAME
}

model ContentReport {
  id         String            @id @map("_id") @db.ObjectId
  type       ContentReportType
  reason     String
  reportedAt DateTime          @default(now())
  reporter   User              @relation(name: "Reporter", references: [id], fields: [reporterID], onDelete: NoAction)
  reporterID String

  offendingUser   User?   @relation(name: "Reported", references: [id], fields: [offendingUserID])
  offendingUserID String?

  offendingGame   Game?   @relation(references: [id], fields: [offendingGameID])
  offendingGameID String?

  @@map("contentReports")
}
